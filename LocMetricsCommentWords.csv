Word,Count
{,43
},40
=,28
/,24
the,16
collider,16
+=,10
\{0}"\,\,10
a,9
-,9
return,9
we,8
Setup,7
if,7
transition,6
<summary>,6
//,6
else,6
duck,6
or,6
</summary>,6
:,6
to,6
data,5
watcher,5
-=,5
<=,5
\characterActor.thisInteractionCollider2D,\,5
&&,5
action,5
are,4
otherCharacterActor,4
void,4
maxDistanceDelta;,4
Big,4
they,4
collision)),4
new,4
\Debug.Log(string.Format("\{0}\,4
CharacterActor,4
\successfully,\,4
\if(Utilities.CheckOtherColliderDirection2D(Direction.Down,\,4
private,4
enemies,4
if(otherCharacterActor),4
\collision,\,4
public,4
of,4
true;,4
<,4
5f)),4
*,4
be,4
count:,4
Power,4
{1},4
this,4
case,4
Small,4
below,4
for,3
U>,3
is,3
not,3
do,3
\trigger."\,\,3
\if(Utilities.CheckOtherColliderDirection2D(Direction.Up,\,3
\blockActor.thisInteractionCollider2D,\,3
something,3
some,3
collision,3
collision.transform.root.GetComponent<CharacterActor>();,3
thisRigidbody2D.velocity,3
>,3
class,3
on,3
collision),3
it,3
test,3
=>,3
state,3
where,3
Goomba,2
_OnTriggerExit2D;,2
_OnCollisionStay2D;,2
_OnCollisionExit2D;,2
\blockActor.thisAnimator.PlayNoRepeat("\Interacted"\);\,2
above,2
\start"\);\,2
otherBlockActor.Interact();,2
if(otherBlockActor),2
want,2
script,2
\name,\,2
blockActor.gameObject.SetActive(false);,2
operator,2
otherCollider.bounds.max.y),2
have,2
(),2
thisInteractionColliderEvents.OnCollisionEnter2DCallback,2
color;,2
\blockActor.thisTransform.position,\,2
component,2
\Actor<T,\,2
it's,2
if(otherCharacterActor.formStateMachine.currentState.isCanBreakBrick),2
\Instantiate(blockActor.content,\,2
same,2
\Debug.Log(string.Format("\Data\,2
collision.GetComponentInRoot<Transform>();,2
them,2
Collider2D,2
watchers.Count));,2
Singleton.Get<IAudioController>().PlayOneShot(blockActor.contentAppearSound);,2
+,2
thisInteractionColliderEvents.OnCollisionExit2DCallback,2
otherBlockActor,2
if(characterActor.formStateMachine.currentState.isCanBreakBrick),2
Distance:,2
});,2
with,2
\ActionTemplates.RunActionAfterSeconds("\BlockBrain_DelayedDisable"\,\,2
_OnCollisionEnter2D;,2
added,2
removed,2
bump,2
\Debug.Log("\Block\,2
|,2
t,2
\Environment.NewLine,\,2
\Debug.Log(string.Format("\Watcher\,2
our,2
Transform,2
Mathf.Abs(collider.bounds.max.y,2
GUI.color,2
BlockActor,2
_OnTriggerStay2D;,2
mario,2
Color,2
interaction,2
an,2
if(characterActor.IsBrainEnemy(otherCharacterActor.brain)),2
when,2
entered,2
contact,2
execution,2
could,2
as,2
thisInteractionColliderEvents.OnTriggerStay2DCallback,2
thisInteractionColliderEvents.OnCollisionStay2DCallback,2
you,2
if(blockActor.content),2
Empower,2
thisInteractionColliderEvents.OnTriggerExit2DCallback,2
thisRigidbody2D.velocity.y,2
watcher.Count));,2
\Debug.Log("\StateMachine\,2
0;,2
Singleton.Get<IAudioController>().PlayOneShot(blockActor.hitSound);,2
ActionQueue,2
used,2
\interacted"\);\,2
blockActor.thisTransform.rotation);,2
Stomp/Destroy,2
y,2
otherBlockActor.Destroy();,2
smaller,2
Fall,2
time,2
buffables,2
\.05f,\,2
Demote,2
kill,2
distance,2
17,2
t.name));,2
upon,2
Machine,1
\LevelItemActor<T,\,1
Mathf.Abs(collider.bounds.min.x,1
collisions,1
Example,1
\collision.name,\,1
faded,1
{0}:,1
\otherCollider.bounds.max.y,\,1
Bugs:,1
Debug.Log(Mathf.Abs(blockActor.transform.position.x,1
collision.transform.parent.GetComponent<BlockActor>();,1
everytime,1
isGrounded,1
snapping,1
interacting,1
infinite,1
vertex,1
like,1
parent:,1
\Debug.Log("\Destroy"\);\,1
Draw,1
optimize,1
Time.fixedDeltaTime);,1
\"\||"\\,1
collision.transform.root.name));,1
\directionalBoxCast.GetHits(touchedColliders,\,1
that,1
LevelItemActor.LevelItemBrain>,1
code,1
interactor.GetComponent<BlockActor>();,1
Background,1
need,1
interactable.Interact(characterActor.gameObject);,1
We,1
way,1
(Mathf.Abs(collider.bounds.max.y,1
interactable.name));,1
{4},1
sprinting,1
faded.a,1
\Debug.Log(string.Format("\Brick\,1
characterActor.isSprinting,1
SpriteRenderer,1
cast,1
if(Mathf.Abs(blockActor.transform.position.x,1
otherCharacterActor.transform.position.x),1
\Debug.Log(string.Format("\Collision:\,1
Count:,1
(state),1
FixedUpdateGravity(),1
\GUI.Box(posLine,\,1
0f);,1
Character2D,1
characterActor.name));,1
Direction.Up:,1
\Debug.Log(string.Format("\Creating\,1
messageHeight),1
FIXED:,1
Animator,1
0.5f;,1
collision.name));,1
\{1}"\,\,1
\collider.bounds.max.y,\,1
owner.thisRigidbody2D.AddForce(owner.moveDirection,1
(string.IsNullOrEmpty(note.message),1
callable,1
Resumes,1
message,1
otherBlockActor.thisInteractionCollider2D;,1
funny,1
Pauses,1
\{2}"\,\,1
otherCharacterActor.thisInteractionCollider2D;,1
useful,1
otherCollider.bounds.max.x),1
Iterate,1
\LevelItemActor<LevelItemActor,\,1
stateMachine.SetState(oneBaseState);,1
at,1
||,1
Starts,1
posLine.height,1
!=,1
\code,\,1
already,1
values,1
change,1
#MICRO-OPTIMIZATIIIIION,1
\otherCollider.bounds.max.y).ToString(),\,1
T,1
otherCollider.bounds.max.x,1
leaves,1
Input.GetKey(KeyCode.LeftShift);,1
otherCollider.bounds.max.y)));,1
\Debug.Log("\dead"\);\,1
present,1
\{5}"\,\,1
.8f),1
\Debug.Log("\small"\);\,1
2;,1
Stops,1
events,1
IStateMachine,1
\Debug.Log("\Pushed\,1
Rigidbody2D,1
attaching,1
{3},1
If,1
interactable,1
temp,1
DataWatcher.AddData(gameObject);,1
Direction.Right:,1
position.width);,1
characterActor.movementStateMachine.SetState(characterActor.fallMovementState);,1
==,1
int,1
box,1
making,1
float,1
};,1
doing,1
around,1
\issues,\,1
downForce,1
characterActor.inputAxis,1
\Actor"\)]\,1
owner.moveSpeed,1
with:,1
Item,1
Plz,1
Vector2,1
collision.transform.root.GetComponentInParent<Rigidbody2D>().name));,1
if(interactable),1
stateMachine.OnPushState,1
Get,1
editor,1
inspectorNoteStyle.customStyles[1].CalcHeight(new,1
monobehaviour,1
gaps,1
usage:,1
methods,1
ActionQueue();,1
but,1
\otherCollider.transform.root.name,\,1
Direction.Down:,1
\Vector2(Input.GetAxisRaw("\Horizontal"\),\,1
composite,1
stuck,1
collision.transform.root.GetComponent<Interactable>();,1
color,1
walking,1
It,1
Vector2.down,1
found,1
stateMachine.SetOwner(this);,1
ActorBrain<T>,1
\[InspectorNote("\Level\,1
coroutine,1
Specs,1
FixedUpdateGravity();,1
name,1
(Might,1
get,1
seems,1
header,1
now,1
OnCollisionEnter2D(Collision2D,1
actions.AddAction(MyCoroutine());,1
otherCollider.bounds.min.x,1
otherCharacterActor.statusStateMachine.SetState(otherCharacterActor.deadStatusState);,1
Debug,1
actions,1
\Vector2(thisRigidbody2D.velocity.x,\,1
better,1
stateMachine;,1
switch(direction),1
{2}:,1
bunch,1
LevelItemBrain,1
Destroy(otherCharacterActor.gameObject);,1
will,1
ActorBrain<LevelItemActor>,1
default:,1
\runner,\,1
instead,1
Runtime,1
moveDirection;,1
Can,1
\GUIContent(note.Message),\,1
Interactable,1
\collider.transform.root.name,\,1
\Debug.Log(string.Format("\State\,1
Rect,1
too,1
exit,1
Mathf.Abs(collider.bounds.min.y,1
outside,1
downForce;,1
type:,1
type.Name));,1
bug,1
reason,1
thisRigidbody.velocity.y,1
through,1
field,1
Time.fixedDeltaTime,1
so,1
\machine"\);\,1
otherCollider.bounds.min.x),1
(Without,1
this?),1
don't,1
small,1
collider.bounds.max.x,1
temp.SetState(twoBaseState);,1
messageHeight,1
\if(Utilities.CheckOtherColliderDirection2D(Direction.Left,\,1
scripts,1
0f;,1
boxCastMask);,1
headerHeight;,1
in,1
otherCollider.bounds.min.y,1
Dummy,1
by,1
\//Debug.Log(string.Format("\Collided\,1
characterActor.isJumping,1
collision.collider.name));,1
something.</returns>,1
For,1
collider.bounds.max.y,1
(collider.bounds.max.y,1
\characterActor.name,\,1
order,1
State,1
screw,1
\"\&&"\\,1
otherCollider.bounds.max.y,1
And,1
otherCollider.bounds.min.y),1
posLine,1
posLine.y,1
{1}'s,1
IsColliding(Direction.Down),1
position;,1
\Debug.Log(string.Format("\Getting\,1
if(!IsColliding(Direction.Down),1
all,1
optimized,1
loop),1
otherCharacterActor.transform.position.x));,1
0f),1
LevelItemActor,1
gravity;,1
if(otherCharacterActor.formStateMachine.currentState,1
interactor.GetComponent<CharacterActor>();,1
easily,1
U,1
\Debug.Log(string.Format("\Mario\,1
cache,1
GUI.color;,1
was,1
Input.GetKey(KeyCode.Space);,1
Unity,1
otherCharacterActor.smallFormState),1
collider.bounds.min.y,1
Direction.Left:,1
very,1
{0},1
actions.Start();,1
characterActor.movementStateMachine.PushState(characterActor.bounceMovementState);,1
runner,1
\Input.GetAxisRaw("\Vertical"\));\,1
OnTriggerExit2D(Collider2D,1
interacted,1
otherCharacterActor.SetForm(otherCharacterActor.smallFormState);,1
having,1
false;,1
HOTFIX,1
<returns>The,1
maxDistanceDelta).ToString()));,1
collider.bounds.min.x,1
headache,1
OnTriggerEnter2D(Collider2D,1
abstract,1
stateMachine.stateCount));,1
posLine.x,1
\"\"\);\,1
set,1
Investigate,1
This,1
faded;,1
below:,1
Mathf.Abs(collider.bounds.max.x,1
\Debug.Log("\Interact"\);\,1
\Debug.Log(string.Format("\Comparison:\,1
always,1
,1
